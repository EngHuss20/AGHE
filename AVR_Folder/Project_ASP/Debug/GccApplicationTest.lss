
GccApplicationTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000132  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000874  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a1  00000000  00000000  00000b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000045b  00000000  00000000  000010c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000164  00000000  00000000  00001524  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000425  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001aad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00001af5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  64:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LED0_Initialize>:
{
	CLR_BIT(Relay_PORT, Relay);
}
void Relay_TGL(void)
{
	TGL_BIT(Relay_PORT, Relay);
  6c:	84 b3       	in	r24, 0x14	; 20
  6e:	84 60       	ori	r24, 0x04	; 4
  70:	84 bb       	out	0x14, r24	; 20
  72:	08 95       	ret

00000074 <LED0_ON>:
  74:	85 b3       	in	r24, 0x15	; 21
  76:	84 60       	ori	r24, 0x04	; 4
  78:	85 bb       	out	0x15, r24	; 21
  7a:	08 95       	ret

0000007c <LED0_OFF>:
  7c:	85 b3       	in	r24, 0x15	; 21
  7e:	8b 7f       	andi	r24, 0xFB	; 251
  80:	85 bb       	out	0x15, r24	; 21
  82:	08 95       	ret

00000084 <LED1_Initialize>:
  84:	84 b3       	in	r24, 0x14	; 20
  86:	80 68       	ori	r24, 0x80	; 128
  88:	84 bb       	out	0x14, r24	; 20
  8a:	08 95       	ret

0000008c <LED2_Initialize>:
  8c:	81 b3       	in	r24, 0x11	; 17
  8e:	88 60       	ori	r24, 0x08	; 8
  90:	81 bb       	out	0x11, r24	; 17
  92:	08 95       	ret

00000094 <LED2_ON>:
  94:	82 b3       	in	r24, 0x12	; 18
  96:	88 60       	ori	r24, 0x08	; 8
  98:	82 bb       	out	0x12, r24	; 18
  9a:	08 95       	ret

0000009c <LED2_OFF>:
  9c:	82 b3       	in	r24, 0x12	; 18
  9e:	87 7f       	andi	r24, 0xF7	; 247
  a0:	82 bb       	out	0x12, r24	; 18
  a2:	08 95       	ret

000000a4 <Relay_Initialize>:
  a4:	8a b3       	in	r24, 0x1a	; 26
  a6:	84 60       	ori	r24, 0x04	; 4
  a8:	8a bb       	out	0x1a, r24	; 26
  aa:	08 95       	ret

000000ac <Relay_ON>:
  ac:	8b b3       	in	r24, 0x1b	; 27
  ae:	84 60       	ori	r24, 0x04	; 4
  b0:	8b bb       	out	0x1b, r24	; 27
  b2:	08 95       	ret

000000b4 <Relay_OFF>:
  b4:	8b b3       	in	r24, 0x1b	; 27
  b6:	8b 7f       	andi	r24, 0xFB	; 251
  b8:	8b bb       	out	0x1b, r24	; 27
  ba:	08 95       	ret

000000bc <Buzzer_Initialize>:
}


void Buzzer_Initialize(void)
{
	SET_BIT(Buzzer_DDR, Buzzer);
  bc:	8a b3       	in	r24, 0x1a	; 26
  be:	88 60       	ori	r24, 0x08	; 8
  c0:	8a bb       	out	0x1a, r24	; 26
  c2:	08 95       	ret

000000c4 <Buzzer_ON>:
}
void Buzzer_ON(void)
{
	SET_BIT(Buzzer_PORT, Buzzer);
  c4:	8b b3       	in	r24, 0x1b	; 27
  c6:	88 60       	ori	r24, 0x08	; 8
  c8:	8b bb       	out	0x1b, r24	; 27
  ca:	08 95       	ret

000000cc <Buzzer_OFF>:
}
void Buzzer_OFF(void)
{
	CLR_BIT(Buzzer_PORT, Buzzer);
  cc:	8b b3       	in	r24, 0x1b	; 27
  ce:	87 7f       	andi	r24, 0xF7	; 247
  d0:	8b bb       	out	0x1b, r24	; 27
  d2:	08 95       	ret

000000d4 <main>:
void Buzzer_TGL(void);

int main(void)
{
	//Initialize direction for LED0 pin as output(Once)
	LED0_Initialize();
  d4:	0e 94 36 00 	call	0x6c	; 0x6c <LED0_Initialize>
	LED1_Initialize();
  d8:	0e 94 42 00 	call	0x84	; 0x84 <LED1_Initialize>
	LED2_Initialize();
  dc:	0e 94 46 00 	call	0x8c	; 0x8c <LED2_Initialize>
	Relay_Initialize();
  e0:	0e 94 52 00 	call	0xa4	; 0xa4 <Relay_Initialize>
	Buzzer_Initialize();
  e4:	0e 94 5e 00 	call	0xbc	; 0xbc <Buzzer_Initialize>
	
	/* Replace with your application code */
	while (1)
	{
		//ON LED0
		LED0_ON();
  e8:	0e 94 3a 00 	call	0x74	; 0x74 <LED0_ON>
		LED2_ON();
  ec:	0e 94 4a 00 	call	0x94	; 0x94 <LED2_ON>
		Relay_ON();
  f0:	0e 94 56 00 	call	0xac	; 0xac <Relay_ON>
		Buzzer_ON();
  f4:	0e 94 62 00 	call	0xc4	; 0xc4 <Buzzer_ON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	83 ed       	ldi	r24, 0xD3	; 211
  fc:	90 e3       	ldi	r25, 0x30	; 48
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x2a>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x34>
 108:	00 00       	nop
		
		_delay_ms(1000);
		
		//OFF LED0
		LED0_OFF();
 10a:	0e 94 3e 00 	call	0x7c	; 0x7c <LED0_OFF>
		LED2_OFF();
 10e:	0e 94 4e 00 	call	0x9c	; 0x9c <LED2_OFF>
		Relay_OFF();
 112:	0e 94 5a 00 	call	0xb4	; 0xb4 <Relay_OFF>
		Buzzer_OFF();
 116:	0e 94 66 00 	call	0xcc	; 0xcc <Buzzer_OFF>
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	83 ed       	ldi	r24, 0xD3	; 211
 11e:	90 e3       	ldi	r25, 0x30	; 48
 120:	21 50       	subi	r18, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0x4c>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x56>
 12a:	00 00       	nop
 12c:	dd cf       	rjmp	.-70     	; 0xe8 <main+0x14>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
